---
- name: Set variables from Jenkins (with safe defaults)
  set_fact:
    frontend_image: "{{ frontend_image | default('ghcr.io/youruser/your-frontend') | lower }}"
    backend_image:  "{{ backend_image  | default('ghcr.io/youruser/your-backend')  | lower }}"
    nginx_image:    "{{ nginx_image    | default('nginx:1.27-alpine') }}"
    image_tag:      "{{ image_tag      | default('latest') }}"
    frontend_domain: "{{ frontend_domain | default(ansible_default_ipv4.address | default('127.0.0.1')) }}"
    jwt_secret:     "{{ jwt_secret     | default('change_me') }}"
    mongo_uri:      "{{ mongo_uri      | default('mongodb://localhost:27017/rmit') }}"

- name: Ensure deploy dirs
  become: true
  file:
    path: "{{ item }}"
    state: directory
    mode: "0755"
  loop:
    - "{{ deploy_root }}"
    - "{{ deploy_root }}/nginx"

- name: Drop nginx.conf
  become: true
  template:
    src: "nginx.conf.j2"
    dest: "{{ deploy_root }}/nginx/nginx.conf"
    mode: "0644"

- name: Drop docker-compose.yml
  become: true
  template:
    src: "docker-compose.yml.j2"
    dest: "{{ deploy_root }}/docker-compose.yml"
    mode: "0644"

- name: Login to GHCR (for compose pull)
  become: true
  shell: |
    set -e
    echo "{{ ghcr_token }}" | docker login ghcr.io -u "{{ ghcr_user }}" --password-stdin
  no_log: true
  when: "'ghcr.io' in (frontend_image + backend_image)"

- name: Pull images
  become: true
  shell: |
    set -e
    cd "{{ deploy_root }}"
    docker compose pull
  args:
    executable: /bin/bash

- name: Up services
  become: true
  shell: |
    set -e
    cd "{{ deploy_root }}"
    docker compose up -d
  args:
    executable: /bin/bash

- name: Wait for frontend (HTTP 200/301/302)
  become: false
  delegate_to: localhost
  vars:
    url: "http://{{ frontend_domain }}/"
  retries: 30
  delay: 2
  until: health.status|default(0) in [200,301,302]
  block:
    - name: Probe
      uri:
        url: "{{ url }}"
        status_code: 200,301,302
      register: health
      failed_when: false
