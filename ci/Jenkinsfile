pipeline {
  agent any
  options { skipDefaultCheckout(true) }

  parameters {
    string(name: 'GHCR_NAMESPACE',  defaultValue: 'BennyBach1002', description: 'GitHub user/org (forced lowercase for Docker)')
    string(name: 'BRANCH_TO_BUILD', defaultValue: 'ansible-prod',  description: 'Git branch to build')
    string(name: 'DEPLOY_LIMIT',    defaultValue: 'lb,staging',    description: 'Ansible --limit (e.g. "lb,staging" or "lb,prod")')
  }

  environment {
    APP_NAME  = 'rmit-store'
    INVENTORY = 'infra/ansible/inventory.ini'
    PLAYBOOK  = 'infra/ansible/site.yml'
  }

  stages {
    stage('Checkout into ws/') {
      steps {
        sh 'rm -rf ws && mkdir -p ws'
        checkout([$class: 'GitSCM',
          branches: [[name: "*/${params.BRANCH_TO_BUILD}"]],
          userRemoteConfigs: [[url: 'https://github.com/Charles2404200/prod']],
          extensions: [[ $class: 'RelativeTargetDirectory', relativeTargetDir: 'ws' ]]
        ])
        sh 'ls -la ws | head -n 30'
      }
    }

    stage('Login to GHCR (controller)') {
      steps {
        withCredentials([ usernamePassword(credentialsId: 'GHCR_USER',
                                           usernameVariable: 'GH_USER',
                                           passwordVariable: 'GH_TOKEN') ]) {
          sh 'echo "$GH_TOKEN" | docker login ghcr.io -u "$GH_USER" --password-stdin'
        }
      }
    }

    stage('Build & Push Images (BE/FE only)') {
      steps {
        dir('ws') {
          script {
            def ns = params.GHCR_NAMESPACE.toLowerCase().replaceAll(/[^a-z0-9-]/, '')
            if (ns != params.GHCR_NAMESPACE) {
              echo "NOTE: sanitized GHCR namespace '${params.GHCR_NAMESPACE}' -> '${ns}'"
            }

            def BACKEND  = "ghcr.io/${ns}/rmit-store-backend"
            def FRONTEND = "ghcr.io/${ns}/rmit-store-frontend"
            def TAG      = sh(script: 'git rev-parse --short HEAD', returnStdout: true).trim()

            sh """
              set -e
              echo TAG=${TAG}
              echo BE=${BACKEND}
              echo FE=${FRONTEND}

              docker build --pull --no-cache -t ${BACKEND}:${TAG}  -f ci/Dockerfile.backend .
              docker tag ${BACKEND}:${TAG} ${BACKEND}:latest
              docker push ${BACKEND}:${TAG}
              docker push ${BACKEND}:latest

              docker build --pull --no-cache -t ${FRONTEND}:${TAG} -f ci/Dockerfile.frontend .
              docker tag ${FRONTEND}:${TAG} ${FRONTEND}:latest
              docker push ${FRONTEND}:${TAG}
              docker push ${FRONTEND}:latest

              docker image prune -f || true
            """

            env.IMAGE_TAG      = TAG
            env.BACKEND_IMAGE  = BACKEND
            env.FRONTEND_IMAGE = FRONTEND
          }
        }
      }
    }

stage('Deploy with Ansible (Swarm + NGINX)') {
  environment {
    CTRL_HOST    = '54.87.144.232'
    CTRL_USER    = 'ec2-user'
    REMOTE_WORK  = '/home/ec2-user/deploy'
  }
  steps {
    withCredentials([
      usernamePassword(credentialsId: 'GHCR_USER', usernameVariable: 'GH_USER', passwordVariable: 'GH_TOKEN'),
      sshUserPrivateKey(credentialsId: 'ansible-ec2-key', keyFileVariable: 'CTRL_KEY')
    ]) {
      withEnv([
        "FRONTEND_IMAGE=${env.FRONTEND_IMAGE}",
        "BACKEND_IMAGE=${env.BACKEND_IMAGE}",
        "IMAGE_TAG=${env.IMAGE_TAG}"
      ]) {
        dir('ws') {
          sh '''#!/usr/bin/env bash
            set -euo pipefail

            echo "[Deploy] Package Ansible tree"
            test -d infra/ansible || { echo "infra/ansible not found"; exit 2; }
            tar czf ansible.tgz infra/ansible

            echo "[Deploy] Copy to controller ${CTRL_HOST}"
            chmod 600 "${CTRL_KEY}"
            ssh -o StrictHostKeyChecking=no -i "${CTRL_KEY}" "${CTRL_USER}@${CTRL_HOST}" "mkdir -p '${REMOTE_WORK}'"
            scp -o StrictHostKeyChecking=no -i "${CTRL_KEY}" ansible.tgz "${CTRL_USER}@${CTRL_HOST}:${REMOTE_WORK}/ansible.tgz"

            echo "[Deploy] Run Ansible ON controller"
            ssh -tt -o StrictHostKeyChecking=no -i "${CTRL_KEY}" "${CTRL_USER}@${CTRL_HOST}" bash -lc '
              set -euo pipefail

              INVENTORY="infra/ansible/inventory.ini"
              PLAYBOOK="infra/ansible/site.yml"
              DEPLOY_LIMIT="lb,staging"

              FRONTEND_IMAGE="'"${FRONTEND_IMAGE}"'"
              BACKEND_IMAGE="'"${BACKEND_IMAGE}"'"
              IMAGE_TAG="'"${IMAGE_TAG}"'"
              GH_USER="'"${GH_USER}"'"
              GH_TOKEN="'"${GH_TOKEN}"'"

              # Ensure Ansible
              if ! command -v ansible-playbook >/dev/null 2>&1; then
                if command -v yum >/dev/null 2>&1; then
                  sudo yum -y install ansible python3 || true
                elif command -v apt-get >/dev/null 2>&1; then
                  sudo apt-get update && sudo apt-get install -y ansible python3
                fi
              fi

              cd "'"${REMOTE_WORK}"'"
              rm -rf infra || true
              tar xzf ansible.tgz

              # Force inventory to localhost
              cat > "${INVENTORY}" <<EOF
[lb]
edge-1 ansible_host=127.0.0.1 ansible_connection=local

[staging]
edge-1 ansible_host=127.0.0.1 ansible_connection=local

[all:vars]
ansible_user=ec2-user
ansible_python_interpreter=/usr/bin/python3
EOF

              # Make nginx serve http://54.87.144.232/
              mkdir -p infra/ansible/group_vars
              cat > infra/ansible/group_vars/all.yml <<YML
frontend_image: "${FRONTEND_IMAGE}"
backend_image:  "${BACKEND_IMAGE}"
image_tag:      "${IMAGE_TAG}"

frontend_http_port: 80
backend_staging_port: 3000
staging_domain: "54.87.144.232"
YML

              # Init Docker Swarm if not active (safe with set -u)
              if command -v docker >/dev/null 2>&1; then
                if ! docker info --format "{{.Swarm.LocalNodeState}}" 2>/dev/null | grep -qi active; then
                  ADVERTISE=""
                  # Try public IP first, then first local IP, then loopback
                  ADVERTISE="$(curl -s --max-time 3 ifconfig.me || true)"
                  if [ -z "${ADVERTISE}" ]; then
                    ADVERTISE="$(hostname -I 2>/dev/null | awk '"'"'{print $1}'"'"' || true)"
                  fi
                  [ -z "${ADVERTISE}" ] && ADVERTISE="127.0.0.1"
                  sudo docker swarm init --advertise-addr "${ADVERTISE}" || true
                fi
              fi

              # Collections (optional)
              if [ -f infra/ansible/requirements.yml ]; then
                ansible-galaxy collection install -p ./collections -r infra/ansible/requirements.yml
                export ANSIBLE_COLLECTIONS_PATHS="./collections:$HOME/.ansible/collections:/usr/share/ansible/collections"
              fi

              export ANSIBLE_STDOUT_CALLBACK=yaml
              export ANSIBLE_HOST_KEY_CHECKING=False

              # Run playbook
              ansible-playbook -i "${INVENTORY}" "${PLAYBOOK}" \
                -l "${DEPLOY_LIMIT}" \
                -e env=staging \
                -e "backend_image=${BACKEND_IMAGE}" \
                -e "frontend_image=${FRONTEND_IMAGE}" \
                -e "image_tag=${IMAGE_TAG}" \
                -e "ghcr_user=${GH_USER}" \
                -e "ghcr_token=${GH_TOKEN}" \
                -e "docker_user=ec2-user" \
                -e "docker_cli_plugins_dir=/usr/libexec/docker/cli-plugins" \
                -e "docker_compose_version=v2.27.0"
            '

            echo "[Verify] http://54.87.144.232/ …"
            for i in {1..30}; do
              code=$(curl -sS -o /dev/null -w "%{http_code}" http://54.87.144.232/ || true)
              if [[ "$code" =~ ^2|3 ]]; then
                echo "OK: HTTP $code"
                exit 0
              fi
              echo "Waiting (attempt $i): got $code"
              sleep 2
            done
            echo "ERROR: site not healthy at http://54.87.144.232/"
            exit 1
          '''
        }
      }
    }
  }
}
  }

  post {
    success { echo "✅ ${env.APP_NAME} ${env.IMAGE_TAG} built (BE/FE) & deployed via Swarm + NGINX." }
    failure { echo "❌ Pipeline failed. See console log." }
  }
}
