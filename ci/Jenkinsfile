pipeline {
  agent any
  options {
    // Don’t let two builds share a dirty workspace
    disableConcurrentBuilds()
    // Auto-wipe workspace after build
    // (we also manually wipe before checkout below)
  }

  parameters {
    string(name: 'BRANCH_TO_BUILD', defaultValue: 'ansible-prod', description: 'Git branch to build')
  }

  environment {
    REPO_URL = 'https://github.com/Charles2404200/prod'

    // Target host
    HOST_IP   = '34.227.19.111'
    HOST_USER = 'ec2-user'

    // Local image names (built on Jenkins)
    BACKEND_IMAGE  = 'rmit-store-backend'
    FRONTEND_IMAGE = 'rmit-store-frontend'
    DB_IMAGE       = 'rmit-store-db'
    IMAGE_TAG      = 'latest'
  }

  stages {
    stage('Reset workspace') {
      steps {
        // Wipe anything that might linger (including a broken .git)
        deleteDir()
      }
    }

    stage('Checkout (clean)') {
      steps {
        checkout([
          $class: 'GitSCM',
          branches: [[name: "*/${params.BRANCH_TO_BUILD}"]],
          userRemoteConfigs: [[url: "${env.REPO_URL}"]],
          extensions: [
            [$class: 'CleanBeforeCheckout'],
            [$class: 'CheckoutOption', timeout: 30]
          ]
        ])
        sh 'git rev-parse --short HEAD || true'
      }
    }

    stage('Build 3 Docker images') {
      steps {
        sh """
          echo '[docker] build backend'
          docker build -t ${env.BACKEND_IMAGE}:${env.IMAGE_TAG} -f ci/Dockerfile.backend .

          echo '[docker] build frontend'
          docker build -t ${env.FRONTEND_IMAGE}:${env.IMAGE_TAG} -f ci/Dockerfile.frontend .

          echo '[docker] build db'
          docker build -t ${env.DB_IMAGE}:${env.IMAGE_TAG} -f ci/Dockerfile.db .
        """
      }
    }

    stage('Copy repo & run Ansible on host') {
      steps {
        withCredentials([
          sshUserPrivateKey(credentialsId: 'ansible-ec2-key', keyFileVariable: 'SSH_KEY')
        ]) {
          sh """
            chmod 600 "${SSH_KEY}"

            echo '[ssh] rsync repo to host'
            rsync -az --delete -e "ssh -o StrictHostKeyChecking=no -i ${SSH_KEY}" ./ ${env.HOST_USER}@${env.HOST_IP}:/home/${env.HOST_USER}/deploy

            echo '[ssh] run ansible-playbook'
            ssh -o StrictHostKeyChecking=no -i "${SSH_KEY}" ${env.HOST_USER}@${env.HOST_IP} '
              set -e
              cd ~/deploy/infra/ansible
              # Your inventory.ini already points edge-1 to the host
              ansible-playbook -i inventory.ini site.yml --limit lb
            '
          """
        }
      }
    }
  }

  post {
    success { echo "✅ Build + Ansible deploy finished on ${env.HOST_IP}" }
    failure { echo "❌ Pipeline failed. Check console output." }
  }
}
