pipeline {
  agent any
  options { timestamps() }

  parameters {
    string(name: 'GHCR_NAMESPACE', defaultValue: 'BennyBach1002', description: 'GHCR namespace (GitHub user/org, lowercase, no @)')
    string(name: 'BRANCH_TO_BUILD', defaultValue: 'main', description: 'Git branch to build')
    string(name: 'DEPLOY_LIMIT', defaultValue: 'lb,staging', description: 'Ansible --limit hosts (comma-separated)')
  }

  environment {
    APP_NAME = 'rmit-store'
    // defaults (will be overwritten after we sanitize namespace)
    BACKEND_IMAGE  = "ghcr.io/${params.GHCR_NAMESPACE}/rmit-store-backend"
    FRONTEND_IMAGE = "ghcr.io/${params.GHCR_NAMESPACE}/rmit-store-frontend"
    DB_IMAGE       = "ghcr.io/${params.GHCR_NAMESPACE}/rmit-store-db"
    INVENTORY      = 'infra/ansible/inventory.ini'
    PLAYBOOK       = 'infra/ansible/site.yml'
  }

  stages {

    stage('Checkout') {
      steps {
        checkout scm
        sh "git checkout ${params.BRANCH_TO_BUILD}"
      }
    }

    stage('Login to GHCR') {
      steps {
        withCredentials([ usernamePassword(credentialsId: 'GHCR_USER', usernameVariable: 'GH_USER', passwordVariable: 'GH_TOKEN') ]) {
          sh 'echo "$GH_TOKEN" | docker login ghcr.io -u "$GH_USER" --password-stdin'
        }
      }
    }

    stage('Build & Push Images (BE/FE/DB)') {
      steps {
        script {
          // sanitize namespace (no @, lowercase, only a-z0-9-)
          def ns = params.GHCR_NAMESPACE.toLowerCase().replaceAll(/[^a-z0-9-]/, '')
          env.BACKEND_IMAGE  = "ghcr.io/${ns}/rmit-store-backend"
          env.FRONTEND_IMAGE = "ghcr.io/${ns}/rmit-store-frontend"
          env.DB_IMAGE       = "ghcr.io/${ns}/rmit-store-db"
          env.IMAGE_TAG      = sh(script: 'git rev-parse --short HEAD', returnStdout: true).trim()

          // build & push
          sh """
            echo ">> Building backend:    ${BACKEND_IMAGE}:${IMAGE_TAG}"
            docker build -t ${BACKEND_IMAGE}:${IMAGE_TAG} -f ci/Dockerfile.backend .
            docker tag ${BACKEND_IMAGE}:${IMAGE_TAG} ${BACKEND_IMAGE}:latest
            docker push ${BACKEND_IMAGE}:${IMAGE_TAG}
            docker push ${BACKEND_IMAGE}:latest

            echo ">> Building frontend:   ${FRONTEND_IMAGE}:${IMAGE_TAG}"
            docker build -t ${FRONTEND_IMAGE}:${IMAGE_TAG} -f ci/Dockerfile.frontend .
            docker tag ${FRONTEND_IMAGE}:${IMAGE_TAG} ${FRONTEND_IMAGE}:latest
            docker push ${FRONTEND_IMAGE}:${IMAGE_TAG}
            docker push ${FRONTEND_IMAGE}:latest

            echo ">> Building database:   ${DB_IMAGE}:${IMAGE_TAG}"
            docker build -t ${DB_IMAGE}:${IMAGE_TAG} -f Dockerfile.db .
            docker tag ${DB_IMAGE}:${IMAGE_TAG} ${DB_IMAGE}:latest
            docker push ${DB_IMAGE}:${IMAGE_TAG}
            docker push ${DB_IMAGE}:latest

            docker image prune -f
          """
        }
      }
    }

    stage('Deploy with Ansible (Docker Swarm + NGINX)') {
      steps {
        withCredentials([ usernamePassword(credentialsId: 'GHCR_USER', usernameVariable: 'GH_USER', passwordVariable: 'GH_TOKEN') ]) {
          sh """
            # ensure ansible present
            if ! command -v ansible-playbook >/dev/null 2>&1; then
              if command -v apt-get >/dev/null 2>&1; then
                sudo apt-get update && sudo apt-get install -y ansible
              elif command -v yum >/dev/null 2>&1; then
                sudo yum install -y ansible
              else
                echo "Ansible not found and no apt/yum available"; exit 1
              fi
            fi

            # (optional) install any galaxy deps if you add them later
            test -f infra/ansible/requirements.yml && ansible-galaxy collection install -r infra/ansible/requirements.yml || true

            # run playbook limited to lb,staging hosts; pass image tag and GHCR credentials
            ansible-playbook -i ${INVENTORY} ${PLAYBOOK} \\
              -l ${params.DEPLOY_LIMIT} \\
              -e image_tag=${IMAGE_TAG} \\
              -e ghcr_user=${GH_USER} \\
              -e ghcr_token=${GH_TOKEN}
          """
        }
      }
    }
  }

  post {
    success {
      echo "✅ ${env.APP_NAME} ${env.IMAGE_TAG} built & deployed via Swarm."
    }
    failure {
      echo "❌ Pipeline failed."
    }
  }
}
