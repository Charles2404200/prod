pipeline {
  agent any
  options { skipDefaultCheckout(true) }

  parameters {
    string(name: 'GHCR_NAMESPACE',  defaultValue: 'BennyBach1002', description: 'GitHub user/org (forced lowercase for Docker)')
    string(name: 'BRANCH_TO_BUILD', defaultValue: 'ansible-prod',  description: 'Git branch to build')
    string(name: 'DEPLOY_LIMIT',    defaultValue: 'lb,staging',    description: 'Ansible --limit (e.g. "lb,staging" or "lb,prod")')
  }

  environment {
    APP_NAME  = 'rmit-store'
    INVENTORY = 'infra/ansible/inventory.ini'
    PLAYBOOK  = 'infra/ansible/site.yml'
  }

  stages {
    stage('Checkout into ws/') {
      steps {
        sh 'rm -rf ws && mkdir -p ws'
        checkout([$class: 'GitSCM',
          branches: [[name: "*/${params.BRANCH_TO_BUILD}"]],
          userRemoteConfigs: [[url: 'https://github.com/Charles2404200/prod']],
          extensions: [[ $class: 'RelativeTargetDirectory', relativeTargetDir: 'ws' ]]
        ])
        sh 'ls -la ws | head -n 30'
      }
    }

    stage('Login to GHCR (controller)') {
      steps {
        withCredentials([ usernamePassword(credentialsId: 'GHCR_USER',
                                           usernameVariable: 'GH_USER',
                                           passwordVariable: 'GH_TOKEN') ]) {
          sh 'echo "$GH_TOKEN" | docker login ghcr.io -u "$GH_USER" --password-stdin'
        }
      }
    }

    stage('Build & Push Images (BE/FE only)') {
      steps {
        dir('ws') {
          script {
            def ns = params.GHCR_NAMESPACE.toLowerCase().replaceAll(/[^a-z0-9-]/, '')
            if (ns != params.GHCR_NAMESPACE) {
              echo "NOTE: sanitized GHCR namespace '${params.GHCR_NAMESPACE}' -> '${ns}'"
            }

            def BACKEND  = "ghcr.io/${ns}/rmit-store-backend"
            def FRONTEND = "ghcr.io/${ns}/rmit-store-frontend"
            def TAG      = sh(script: 'git rev-parse --short HEAD', returnStdout: true).trim()

            sh """
              set -e
              echo TAG=${TAG}
              echo BE=${BACKEND}
              echo FE=${FRONTEND}

              docker build --pull --no-cache -t ${BACKEND}:${TAG}  -f ci/Dockerfile.backend .
              docker tag ${BACKEND}:${TAG} ${BACKEND}:latest
              docker push ${BACKEND}:${TAG}
              docker push ${BACKEND}:latest

              docker build --pull --no-cache -t ${FRONTEND}:${TAG} -f ci/Dockerfile.frontend .
              docker tag ${FRONTEND}:${TAG} ${FRONTEND}:latest
              docker push ${FRONTEND}:${TAG}
              docker push ${FRONTEND}:latest

              docker image prune -f || true
            """

            env.IMAGE_TAG      = TAG
            env.BACKEND_IMAGE  = BACKEND
            env.FRONTEND_IMAGE = FRONTEND
          }
        }
      }
    }

stage('Deploy with Ansible (Swarm + NGINX)') {
  steps {
    withCredentials([
      usernamePassword(credentialsId: 'GHCR_USER',
                       usernameVariable: 'GH_USER',
                       passwordVariable: 'GH_TOKEN'),
      file(credentialsId: 'edge-key-pem', variable: 'EDGE_PEM_FILE') // <-- your kube.pem
    ]) {
      dir('ws') {
        sh '''
          set -euo pipefail

          # Set paths/targets (adjust if your files differ)
          INVENTORY="infra/ansible/inventory.ini"
          PLAYBOOK="infra/ansible/site.yml"
          DEPLOY_LIMIT="lb,staging"   # or "lb,prod" for prod

          # Ensure Ansible present on the Jenkins node
          if ! command -v ansible-playbook >/dev/null 2>&1; then
            if command -v yum >/dev/null 2>&1; then
              sudo yum install -y ansible
            elif command -v apt-get >/dev/null 2>&1; then
              sudo apt-get update && sudo apt-get install -y ansible
            else
              echo "Ansible not found and no apt/yum available"; exit 1
            fi
          fi

          # Install collections if defined
          test -f infra/ansible/requirements.yml && \
            ansible-galaxy collection install -r infra/ansible/requirements.yml || true

          # SSH key for targets
          chmod 600 "$EDGE_PEM_FILE"

          # Run the play
          ANSIBLE_HOST_KEY_CHECKING=False \
          ansible-playbook -i "$INVENTORY" "$PLAYBOOK" \
            -l "$DEPLOY_LIMIT" \
            --private-key "$EDGE_PEM_FILE" \
            -e "backend_image=${BACKEND_IMAGE}" \
            -e "frontend_image=${FRONTEND_IMAGE}" \
            -e "image_tag=${IMAGE_TAG}" \
            -e "env=staging" \
            -e "ghcr_user=${GH_USER}" \
            -e "ghcr_token=${GH_TOKEN}"
        '''
      }
    }
  }
}
  }

  post {
    success { echo "✅ ${env.APP_NAME} ${env.IMAGE_TAG} built (BE/FE) & deployed via Swarm + NGINX." }
    failure { echo "❌ Pipeline failed. See console log." }
  }
}
