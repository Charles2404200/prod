pipeline {
  agent any
  options { skipDefaultCheckout(true) }

  parameters {
    string(name: 'GHCR_NAMESPACE',  defaultValue: 'BennyBach1002', description: 'GitHub user/org (will be forced lowercase)')
    string(name: 'BRANCH_TO_BUILD', defaultValue: 'main',          description: 'Git branch to build (e.g. main or ansible-prod)')
    string(name: 'DEPLOY_LIMIT',    defaultValue: 'lb,prod',       description: 'Ansible --limit (e.g. "lb,staging" or "lb,prod")')
  }

  environment {
    APP_NAME  = 'rmit-store'
    INVENTORY = 'infra/ansible/inventory.ini'
    PLAYBOOK  = 'infra/ansible/site.yml'
  }

  stages {
    stage('Checkout into ws/') {
      steps {
        sh 'rm -rf ws && mkdir -p ws'
        checkout([$class: 'GitSCM',
          branches: [[name: "*/${params.BRANCH_TO_BUILD}"]],
          userRemoteConfigs: [[url: 'https://github.com/Charles2404200/prod']],
          extensions: [[ $class: 'RelativeTargetDirectory', relativeTargetDir: 'ws' ]]
        ])
        sh 'ls -la ws | head -n 30'
      }
    }

    stage('Login to GHCR (controller)') {
      steps {
        withCredentials([ usernamePassword(credentialsId: 'GHCR_USER',
                                           usernameVariable: 'GH_USER',
                                           passwordVariable: 'GH_TOKEN') ]) {
          sh 'echo "$GH_TOKEN" | docker login ghcr.io -u "$GH_USER" --password-stdin'
        }
      }
    }

    stage('Build & Push Images (BE/FE/DB)') {
      steps {
        dir('ws') {
          script {
            // force lowercase and strip invalid chars for Docker repo names
            def ns  = params.GHCR_NAMESPACE.toLowerCase().replaceAll(/[^a-z0-9-]/, '')
            if (ns != params.GHCR_NAMESPACE) {
              echo "NOTE: sanitized GHCR namespace '${params.GHCR_NAMESPACE}' -> '${ns}'"
            }

            // compute image names as local vars (don’t rely on env overwrites)
            def BACKEND  = "ghcr.io/${ns}/rmit-store-backend"
            def FRONTEND = "ghcr.io/${ns}/rmit-store-frontend"
            def TAG      = sh(script: 'git rev-parse --short HEAD', returnStdout: true).trim()

            sh """
              set -e
              echo "TAG=${TAG}"
              echo "BE=${BACKEND}"
              echo "FE=${FRONTEND}"

              # Backend
              docker build --pull --no-cache -t ${BACKEND}:${TAG}  -f ci/Dockerfile.backend .
              docker tag ${BACKEND}:${TAG} ${BACKEND}:latest
              docker push ${BACKEND}:${TAG}
              docker push ${BACKEND}:latest

              # Frontend
              docker build --pull --no-cache -t ${FRONTEND}:${TAG} -f ci/Dockerfile.frontend .
              docker tag ${FRONTEND}:${TAG} ${FRONTEND}:latest
              docker push ${FRONTEND}:${TAG}
              docker push ${FRONTEND}:latest

            """

            // stash values for deploy stage
            env.IMAGE_TAG      = TAG
            env.BACKEND_IMAGE  = BACKEND
            env.FRONTEND_IMAGE = FRONTEND
          }
        }
      }
    }

    stage('Deploy with Ansible (Swarm + NGINX)') {
      steps {
        withCredentials([ usernamePassword(credentialsId: 'GHCR_USER',
                                           usernameVariable: 'GH_USER',
                                           passwordVariable: 'GH_TOKEN') ]) {
          dir('ws') {
            sh """
              set -e
              if ! command -v ansible-playbook >/dev/null 2>&1; then
                if command -v apt-get >/dev/null 2>&1; then
                  sudo apt-get update && sudo apt-get install -y ansible
                elif command -v yum >/dev/null 2>&1; then
                  sudo yum install -y ansible
                else
                  echo "Ansible not found and no apt/yum available"; exit 1
                fi
              fi

              # optional collections
              test -f infra/ansible/requirements.yml && ansible-galaxy collection install -r infra/ansible/requirements.yml || true

              # pass images + tag to override group_vars
              ansible-playbook -i ${INVENTORY} ${PLAYBOOK} \\
                -l ${params.DEPLOY_LIMIT} \\
                -e backend_image=${BACKEND_IMAGE} \\
                -e frontend_image=${FRONTEND_IMAGE} \\
                -e db_image=${DB_IMAGE} \\
                -e image_tag=${IMAGE_TAG} \\
                -e ghcr_user=${GH_USER} \\
                -e ghcr_token=${GH_TOKEN}
            """
          }
        }
      }
    }
  }

  post {
    success { echo "✅ ${env.APP_NAME} ${env.IMAGE_TAG} built & deployed (Swarm + NGINX)." }
    failure { echo "❌ Pipeline failed. See console log." }
  }
}
