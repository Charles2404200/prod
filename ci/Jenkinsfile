pipeline {
    agent any

    parameters {
        string(name: 'GHCR_NAMESPACE', defaultValue: 'benbach2001@gmail.com', description: 'GHCR namespace (user/org)')
        string(name: 'K8S_NAMESPACE',  defaultValue: 'rmit-store', description: 'Kubernetes namespace')
        string(name: 'HOST',           defaultValue: '', description: 'Optional DNS host (leave blank to use server IP)')
        string(name: 'BRANCH_TO_BUILD', defaultValue: 'ansible-prod', description: 'Git branch to build')
    }

    environment {
        APP_NAME = 'rmit-store'
        REPO_URL = 'https://github.com/Charles2404200/prod'
    }

    stages {
        stage('Checkout') {
            steps {
                sh 'rm -rf ws && mkdir -p ws'
                checkout([$class: 'GitSCM',
                  branches: [[name: "*/${params.BRANCH_TO_BUILD}"]],
                  userRemoteConfigs: [[url: "${env.REPO_URL}"]],
                  extensions: [[ $class: 'RelativeTargetDirectory', relativeTargetDir: 'ws' ]]
                ])
                sh 'ls -la ws | head -n 30'
            }
        }

        stage('Sanitize Image Names & Tag') {
            steps {
                script {
                    // sanitize namespace: lowercase, strip invalid chars
                    def ns = params.GHCR_NAMESPACE.trim().toLowerCase().replaceAll('[^a-z0-9-]', '')
                    if (!ns) { error "GHCR_NAMESPACE '${params.GHCR_NAMESPACE}' sanitized to empty! Please pick a valid namespace." }

                    env.BACKEND_IMAGE  = "ghcr.io/${ns}/rmit-store-backend"
                    env.FRONTEND_IMAGE = "ghcr.io/${ns}/rmit-store-frontend"
                    env.DB_IMAGE       = "ghcr.io/${ns}/rmit-store-db"

                    env.IMAGE_TAG = sh(
                        returnStdout: true,
                        script: 'cd ws && git rev-parse --short HEAD'
                    ).trim()
                    if (!env.IMAGE_TAG) { env.IMAGE_TAG = "build-${env.BUILD_NUMBER}" }

                    echo """
Sanitized:
  BACKEND_IMAGE=${env.BACKEND_IMAGE}
  FRONTEND_IMAGE=${env.FRONTEND_IMAGE}
  DB_IMAGE=${env.DB_IMAGE}
  IMAGE_TAG=${env.IMAGE_TAG}
"""
                }
            }
        }

        stage('Login to GHCR') {
            steps {
                withCredentials([ usernamePassword(
                    credentialsId: 'GHCR_USER',
                    usernameVariable: 'GH_USER',
                    passwordVariable: 'GH_TOKEN'
                )]) {
                    sh 'echo "$GH_TOKEN" | docker login ghcr.io -u "$GH_USER" --password-stdin'
                }
            }
        }

        stage('Build & Push Images (BE/FE)') {
            steps {
                withCredentials([ usernamePassword(
                    credentialsId: 'GHCR_USER',
                    usernameVariable: 'GH_USER',
                    passwordVariable: 'GH_TOKEN'
                )]) {
                    dir('ws') {
                        sh '''#!/usr/bin/env bash
set -euo pipefail
echo "[debug] repo tree:"
ls -la; echo; ls -la ci || true

echo "$GH_TOKEN" | docker login ghcr.io -u "$GH_USER" --password-stdin

echo "[build] Backend -> $BACKEND_IMAGE:$IMAGE_TAG"
docker build -t "$BACKEND_IMAGE:$IMAGE_TAG" -f ci/Dockerfile.backend .
docker push "$BACKEND_IMAGE:$IMAGE_TAG"

echo "[build] Frontend -> $FRONTEND_IMAGE:$IMAGE_TAG"
docker build -t "$FRONTEND_IMAGE:$IMAGE_TAG" -f ci/Dockerfile.frontend .
docker push "$FRONTEND_IMAGE:$IMAGE_TAG"
'''
                    }
                }
            }
        }

        // === Example Kubernetes deploy (uncomment when ready) ===
        // stage('Deploy to Kubernetes') { ... }
    }

    post {
        success {
            echo """
✅ ${env.APP_NAME} built & pushed

Build:     ${env.BUILD_URL}
Branch:    ${params.BRANCH_TO_BUILD}
Tag:       ${env.IMAGE_TAG}

Images:
  - ${env.FRONTEND_IMAGE}:${env.IMAGE_TAG}
  - ${env.BACKEND_IMAGE}:${env.IMAGE_TAG}
  - ${env.DB_IMAGE}:${env.IMAGE_TAG}
"""
        }
        failure { echo "❌ Pipeline failed. See logs: ${env.BUILD_URL}console" }
    }
}
