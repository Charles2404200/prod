pipeline {
  agent any
  options { skipDefaultCheckout(true) }

  parameters {
    string(name: 'GHCR_NAMESPACE',  defaultValue: 'BennyBach1002', description: 'GitHub user/org (forced lowercase for Docker)')
    string(name: 'BRANCH_TO_BUILD', defaultValue: 'ansible-prod',  description: 'Git branch to build')
    string(name: 'DEPLOY_LIMIT',    defaultValue: 'lb,staging',    description: 'Ansible --limit (e.g. "lb,staging" or "lb,prod")')
  }

  environment {
    APP_NAME  = 'rmit-store'
    INVENTORY = 'infra/ansible/inventory.ini'
    PLAYBOOK  = 'infra/ansible/site.yml'
  }

  stages {
    stage('Checkout into ws/') {
      steps {
        sh 'rm -rf ws && mkdir -p ws'
        checkout([$class: 'GitSCM',
          branches: [[name: "*/${params.BRANCH_TO_BUILD}"]],
          userRemoteConfigs: [[url: 'https://github.com/Charles2404200/prod']],
          extensions: [[ $class: 'RelativeTargetDirectory', relativeTargetDir: 'ws' ]]
        ])
        sh 'ls -la ws | head -n 30'
      }
    }

    stage('Login to GHCR (controller)') {
      steps {
        withCredentials([ usernamePassword(credentialsId: 'GHCR_USER',
                                           usernameVariable: 'GH_USER',
                                           passwordVariable: 'GH_TOKEN') ]) {
          sh 'echo "$GH_TOKEN" | docker login ghcr.io -u "$GH_USER" --password-stdin'
        }
      }
    }

    stage('Build & Push Images (BE/FE only)') {
      steps {
        dir('ws') {
          script {
            def ns = params.GHCR_NAMESPACE.toLowerCase().replaceAll(/[^a-z0-9-]/, '')
            if (ns != params.GHCR_NAMESPACE) {
              echo "NOTE: sanitized GHCR namespace '${params.GHCR_NAMESPACE}' -> '${ns}'"
            }

            def BACKEND  = "ghcr.io/${ns}/rmit-store-backend"
            def FRONTEND = "ghcr.io/${ns}/rmit-store-frontend"
            def TAG      = sh(script: 'git rev-parse --short HEAD', returnStdout: true).trim()

            sh """
              set -e
              echo TAG=${TAG}
              echo BE=${BACKEND}
              echo FE=${FRONTEND}

              docker build --pull --no-cache -t ${BACKEND}:${TAG}  -f ci/Dockerfile.backend .
              docker tag ${BACKEND}:${TAG} ${BACKEND}:latest
              docker push ${BACKEND}:${TAG}
              docker push ${BACKEND}:latest

              docker build --pull --no-cache -t ${FRONTEND}:${TAG} -f ci/Dockerfile.frontend .
              docker tag ${FRONTEND}:${TAG} ${FRONTEND}:latest
              docker push ${FRONTEND}:${TAG}
              docker push ${FRONTEND}:latest

              docker image prune -f || true
            """

            env.IMAGE_TAG      = TAG
            env.BACKEND_IMAGE  = BACKEND
            env.FRONTEND_IMAGE = FRONTEND
          }
        }
      }
    }

stage('Deploy with Ansible (Swarm + NGINX)') {
  steps {
    withCredentials([
      usernamePassword(
        credentialsId: 'GHCR_USER',          // <-- keep your GHCR creds ID
        usernameVariable: 'GH_USER',
        passwordVariable: 'GH_TOKEN'
      ),
      sshUserPrivateKey(
        credentialsId: 'ansible-ec2-key',    // <-- SSH key for the target hosts
        keyFileVariable: 'ANSIBLE_KEY',
        usernameVariable: 'ANSIBLE_SSH_USER' // usually ec2-user
      )
    ]) {
      dir('ws') {
        sh '''#!/usr/bin/env bash
set -euo pipefail

INVENTORY="${INVENTORY:-infra/ansible/inventory.ini}"
PLAYBOOK="${PLAYBOOK:-infra/ansible/site.yml}"
DEPLOY_LIMIT="${DEPLOY_LIMIT:-lb,staging}"

echo "→ Checking inventory at: ${INVENTORY}"
test -f "${INVENTORY}" || { echo "Inventory not found at ${INVENTORY}"; ls -la; ls -la infra/ansible || true; exit 2; }
echo "----- INVENTORY -----"
sed -n '1,120p' "${INVENTORY}"
echo "---------------------"

# Ensure Ansible
if ! command -v ansible-playbook >/dev/null 2>&1; then
  if command -v yum >/dev/null 2>&1; then
    sudo yum install -y ansible
  elif command -v apt-get >/dev/null 2>&1; then
    sudo apt-get update && sudo apt-get install -y ansible python3-pip
  else
    echo "Ansible not found and no apt/yum available"; exit 1
  fi
fi

# Install Galaxy deps if present
if [[ -f infra/ansible/requirements.yml ]]; then
  ansible-galaxy collection install -r infra/ansible/requirements.yml -p ./collections
fi

chmod 600 "$ANSIBLE_KEY"

# Optional quick SSH check to the first host in [lb] or [staging]
TARGET_HOST="$(awk '
  /^\[lb\]/{g=1;next} /^\[/{g=0}
  g && NF {print; exit}
' "${INVENTORY}" | awk "{print \$1}" || true)"
if [[ -z "${TARGET_HOST}" ]]; then
  TARGET_HOST="$(awk '
    /^\[staging\]/{g=1;next} /^\[/{g=0}
    g && NF {print; exit}
  ' "${INVENTORY}" | awk "{print \$1}" || true)"
fi
if [[ -n "${TARGET_HOST}" ]]; then
  # If host line is "name ansible_host=IP", extract IP, else use the name
  HOST_TO_SSH="$(grep -Eo 'ansible_host=([^ ]+)' <<< "${TARGET_HOST}" | cut -d= -f2 || true)"
  [[ -z "${HOST_TO_SSH}" ]] && HOST_TO_SSH="$(awk '{print $1}' <<< "${TARGET_HOST}")"
  echo "→ SSH check: ${ANSIBLE_SSH_USER}@${HOST_TO_SSH}"
  ssh -o StrictHostKeyChecking=no -i "$ANSIBLE_KEY" "${ANSIBLE_SSH_USER}@${HOST_TO_SSH}" 'hostname' || true
fi

export ANSIBLE_STDOUT_CALLBACK=yaml
export ANSIBLE_HOST_KEY_CHECKING=False
export ANSIBLE_COLLECTIONS_PATHS="./collections:$HOME/.ansible/collections:/usr/share/ansible/collections"

# Run the play with robust -e usage (no multiline extra-vars)
ansible-playbook -i "${INVENTORY}" "${PLAYBOOK}" \
  -l "${DEPLOY_LIMIT}" \
  --private-key "${ANSIBLE_KEY}" \
  -e ansible_user="${ANSIBLE_SSH_USER}" \
  -e "backend_image=${BACKEND_IMAGE}" \
  -e "frontend_image=${FRONTEND_IMAGE}" \
  -e "image_tag=${IMAGE_TAG}" \
  -e "env=staging" \
  -e "ghcr_user=${GH_USER}" \
  -e "ghcr_token=${GH_TOKEN}" \
  -e "docker_user=${ANSIBLE_SSH_USER}" \
  -e "docker_cli_plugins_dir=/usr/libexec/docker/cli-plugins" \
  -e "docker_compose_version=v2.27.0"

echo "✓ Ansible deploy finished."
'''
      }
    }
  }
}
  }

  post {
    success { echo "✅ ${env.APP_NAME} ${env.IMAGE_TAG} built (BE/FE) & deployed via Swarm + NGINX." }
    failure { echo "❌ Pipeline failed. See console log." }
  }
}
