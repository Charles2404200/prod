pipeline {
  agent any
  options { skipDefaultCheckout(true) }

  parameters {
    string(name: 'GHCR_NAMESPACE',  defaultValue: 'BennyBach1002', description: 'GitHub user/org (lowercase for Docker)')
    string(name: 'BRANCH_TO_BUILD', defaultValue: 'ansible-test',  description: 'Git branch to build')
    //string(name: 'DEPLOY_LIMIT',    defaultValue: 'localhost',     description: 'Ansible --limit (use localhost to deploy on Jenkins host)')
  }

  environment {
    APP_NAME  = 'rmit-store'
    DOCKER_EC2_IP = '54.242.180.228'
  }

  stages {

    stage('Checkout into ws/') {
      steps {
        sh 'rm -rf ws && mkdir -p ws'
        checkout([$class: 'GitSCM',
          branches: [[name: "*/${params.BRANCH_TO_BUILD}"]],
          userRemoteConfigs: [[url: 'https://github.com/Charles2404200/prod']],
          extensions: [[ $class: 'RelativeTargetDirectory', relativeTargetDir: 'ws' ]]
        ])
        sh 'ls -la ws | head -n 30'
      }
    }

    stage('Login to GHCR') {
      steps {
        withCredentials([ usernamePassword(credentialsId: 'GHCR_USER',
                                           usernameVariable: 'GH_USER',
                                           passwordVariable: 'GH_TOKEN') ]) {
          sh 'echo "$GH_TOKEN" | docker login ghcr.io -u "$GH_USER" --password-stdin'
        }
      }
    }

    stage('Build & Push Images (FE/BE/DB)') {
      steps {
        dir('ws') {
          script {
            def ns  = params.GHCR_NAMESPACE.toLowerCase().replaceAll(/[^a-z0-9-]/, '')
            def TAG = sh(script: 'git rev-parse --short HEAD', returnStdout: true).trim()

            def BACKEND  = "ghcr.io/${ns}/rmit-store-backend"
            def FRONTEND = "ghcr.io/${ns}/rmit-store-frontend"
            def DBIMG    = "ghcr.io/${ns}/rmit-store-db"

            sh """
              set -e
              echo Building tag ${TAG}

              # Backend
              docker build --pull --no-cache -t ${BACKEND}:${TAG}  -f ci/Dockerfile.backend .
              docker tag ${BACKEND}:${TAG} ${BACKEND}:latest
              docker push ${BACKEND}:${TAG}
              docker push ${BACKEND}:latest

              # Frontend
              docker build --pull --no-cache -t ${FRONTEND}:${TAG} -f ci/Dockerfile.frontend .
              docker tag ${FRONTEND}:${TAG} ${FRONTEND}:latest
              docker push ${FRONTEND}:${TAG}
              docker push ${FRONTEND}:latest

              # Database (re-tag mongo)
              docker pull mongo:6
              docker tag  mongo:6 ${DBIMG}:${TAG}
              docker tag  mongo:6 ${DBIMG}:latest
              docker push ${DBIMG}:${TAG}
              docker push ${DBIMG}:latest

              docker image prune -f || true
            """

            env.IMAGE_TAG      = TAG
            env.BACKEND_IMAGE  = BACKEND
            env.FRONTEND_IMAGE = FRONTEND
            env.DB_IMAGE       = DBIMG
          }
        }
      }
    }

    stage('Deploy to EC2 (Docker Swarm)') {
      steps {
        withCredentials([
          usernamePassword(credentialsId: 'GHCR_USER',
                           usernameVariable: 'GH_USER',
                           passwordVariable: 'GH_TOKEN'),
          sshUserPrivateKey(
            credentialsId: 'jenkins-ec2-key',
            keyFileVariable: 'ANSIBLE_KEY',
            usernameVariable: 'CREDS_USER'
          )
        ]) {
          sh """
            ssh -i "$ANSIBLE_KEY" -o StrictHostKeyChecking=no ec2-user@${DOCKER_EC2_IP} '
              echo "$GH_TOKEN" | docker login ghcr.io -u $GH_USER --password-stdin || true
              cd /home/ec2-user/prod/compose/staging || exit 1

              # Init swarm if not already
              docker swarm init --advertise-addr ${DOCKER_EC2_IP} || true

              # Remove old stack
              docker stack rm mystack || true
              sleep 10

              # Deploy
              docker stack deploy -c docker-stack.yml mystack --with-registry-auth

              # Status
              docker stack services mystack
            '
          """
        }
      }
    }
  }

  post {
    success { echo "✅ ${env.APP_NAME} ${env.IMAGE_TAG} built & deployed to Swarm" }
    failure { echo "❌ Deployment failed. Check console log." }
  }
}
